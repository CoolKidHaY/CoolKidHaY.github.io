{"pages":[{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '82a5b65bc6fb4272260e', clientSecret: '8ce9da62cddc20404654de6b43be34c3d313993f', id: 'comment', repo: 'blog_comment', owner: 'CoolKidHaY', admin: \"CoolKidHaY\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/09/29/hello-world/"},{"title":"test","text":"","link":"/2021/09/30/test/"},{"title":"","text":"SpringCloud使用feign和zuul搭建一个简单的微服务才学习了SpringCloud 微服务的基本组件，做个笔记记录下。 1. 项目环境IDEA 2019 3.1、jdk1.8、mysql 8.0.16、SpringBoot 2.2.1.RELEASE、SpringCloud Hoxton.SR6 SpringCloud的版本一定要适配SpringBoot的版本，如果不清楚，可以去官网查询。 https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/ 2. 需求介绍这个微服务是一个简单的查询，通过id查询用户的信息。系统架构如图： 3. 项目结构 3. 1eureka-server：eureka注册中心，用于服务的注册和发现 3.1.1 导入依赖创建项目后，导入依赖。只需要在pom文件中导入springcloud和eureka服务端组件即可，由于pom依赖篇幅较大，所以所有的pom依赖都放在了最后第5节。 3.1.2 application配置文件eureka注册中心，需要配置eureka服务地址，如果有多个注册中心，则${server.port}可以书写为其他注册中心的端口，进行互相注册。 123456789101112server: port: 10086 # 微服务的端口号spring: application: name: eureka-server # 将来作为微服务名称注入到eureka容器中eureka: client: service-url: defaultZone: http://localhost:${server.port}/eureka # eureka服务地址 server: eviction-interval-timer-in-ms: 5000 # 默认剔除无效连接时间 enable-self-preservation: false # 关闭自我保护 3.1.3 启动类注册中心可以什么都不用书写，只需要开启注册中心服务 123456789@SpringBootApplication@EnableEurekaServer //开启注册中心public class EurekaServerApplication { public static void main(String[] args) { SpringApplication.run(EurekaServerApplication.class, args); }} 3.2 service-consumer：服务的消费方 3.2.1 导入依赖这个的pom文件和注册中心的类似，也需要进行版本管理。但作为服务，需要导入eureka的客户端。因为这个微服务使用了fegin进行服务的远程调用和熔断，所以需要导入熔断组件 3.2.2 application配置文件作为eureka服务的注册方，需要进行服务的拉取，并开启feign的熔断机制 123456789101112131415161718192021server: port: 80spring: application: name: service-consumeeureka: client: service-url: defaultZone: http://localhost:10086/eureka fetch-registry: true registry-fetch-interval-seconds: 5 # 每次拉取服务列表时间hystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 6000 # 设置hystrix的超时时间为6000msfeign: # 开启feign的熔断机制 hystrix: enable: true 3.2.3 启动类1234567891011@SpringBootApplication@EnableDiscoveryClient //开启服务发现@EnableCircuitBreaker //开启熔断机制,可使用@SpringCloudApplication注解代替上面三个注解:@EnableFeignClients //开启feign功能，其集成了ribbon和hystrixpublic class ServiceConsumerApplication { public static void main(String[] args) { SpringApplication.run(ServiceConsumerApplication.class, args); } } 3.2.4 处理代码controller: 12345678910111213@Controller@RequestMapping(&quot;user&quot;)public class UserController { @Autowired UserClient userClient; //注入一个feign对象 @RequestMapping(&quot;{uid}&quot;) @ResponseBody public String getUserById(@PathVariable(&quot;uid&quot;) String uid){ return userClient.getUserById(uid); //使用feign来转发请求 }} UserClient：一个接口，Feign会通过动态代理，帮我们生成实现类，@FeignClient，声明这是一个Feign客户端。接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果改造原来的调用逻辑，调用UserClient接口。所以将Controller中的方法复制过来。 1234567@FeignClient(value = &quot;service-provide&quot;,fallback = UserClientCallBack.class) //指定服务idpublic interface UserClient { @RequestMapping(&quot;/user/{uid}&quot;) public String getUserById(@PathVariable(&quot;uid&quot;) String uid); } UserClientCallBack：当在application配置文件中开启熔断功能时，就可以书写熔断方法了。只需要继承上面的接口即可 12345678@Componentpublic class UserClientCallBack implements UserClient{ @Override public String getUserById(String uid) { return new String(&quot;请求超时，请稍后再试！&quot;); }} 3.3 service-provide：服务的提供方和传统SSM项目一样的书写方式 3.3.1 导入依赖由于提供方需要连接数据库，所以需要mysql的驱动；还要有注册到eureka中，所以需要eureka的客户端 3.3.2 application配置文件服务提供者与服务消费者此配置类似。 12345678910111213141516server: port: 8081spring: datasource: # 数据库配置 url: jdbc:mysql:///store?serverTimezone=UTC username: root password: 12345 application: name: service-provide # 配置微服务名称eureka: client: service-url: defaultZone: http://localhost:10086/eureka # 配置服务器地址 instance: lease-renewal-interval-in-seconds: 5 # 心跳间隔时间 lease-expiration-duration-in-seconds: 15 # 心跳过期时间 3.3.3 启动类需要扫描pojo和mapper类，并开启服务发现 12345678910@SpringBootApplication@MapperScan(&quot;com.hay.serviceprovide.mapper&quot;)@EnableDiscoveryClient //开启服务发现public class ServiceProvideApplication { public static void main(String[] args) { SpringApplication.run(ServiceProvideApplication.class, args); }} 3.3.4处理代码处理代码比较简单，就是一个查询根据id查询用户的请求。service和mapper代码和平时书写的没有区别所以省略掉。 12345678910111213@Controller@RequestMapping(&quot;/user&quot;)public class UserController { @Autowired UserService userService; @RequestMapping(&quot;{uid}&quot;) @ResponseBody public User getUserById(@PathVariable(&quot;uid&quot;) String uid) { return userService.getUserById(uid); }} 3.4 zuul-server：zuul网关，用于请求的路由和过滤 3.4.1 依赖文件需要注册到eureka中，并导入zuul组件依赖 3.4.2 application配置文件需要将服务路径注册到zuul网关，以便zuul进行路由和过滤。 其中配置服务请求路径方法有3种。分别是： ```yamlzuul: routes: 服务名: path: /xxx/** serviceId: 服务名 123456- ```yaml zuul: routes: 服务名: path: /xxx/** ```yamlzuul: routes: 服务名: /xxx/** 123456789101112131415161718application.yml的配置：```yamlserver: port: 10001spring: application: name: api-gatewayzuul: routes: service-provide: /provide/** # 配置服务请求路径(服务提供方)，将/provide/**路径映射到服务名为service-provide的服务中进行处理 service-consume: /consume/** # 配置服务请求路径(服务消费方) prefix: /api # 设置zuul网关请求前缀eureka: client: service-url: defaultZone: http://localhost:10086/eureka 3.4.3 启动类以为zuul也是一个服务，所以需要注册到eureka中 12345678910@SpringBootApplication@EnableZuulProxy //开启zuul组件@EnableDiscoveryClient //开启eureka客户端public class ZuulApplication { public static void main(String[] args) { SpringApplication.run(ZuulApplication.class, args); }} 3.4.4 处理代码Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。 ZuulFilter：是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243@Componentpublic class UserFilter extends ZuulFilter { /** * 过滤器的类型： * pre(路由前) routing(路由时) post(路由后) error(错误) * @return */ @Override public String filterType() { return &quot;pre&quot;; } // 过滤器的执行级别 @Override public int filterOrder() { return 10; } // 是否开启此过滤器 @Override public boolean shouldFilter() { return true; } // 处理代码 @Override public Object run() throws ZuulException { // 获取Zuul的上下文对象 RequestContext context = RequestContext.getCurrentContext(); // 获取Request请求对象 HttpServletRequest request = context.getRequest(); // 获取参数 String token = request.getParameter(&quot;token&quot;); // 如果没有token if (StringUtils.isBlank(token)){ // 不转发请求 context.setSendZuulResponse(false); // 设置状态码401 表示未认证 context.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value()); // 设置响应，打印字符串 context.setResponseBody(&quot;request error 401!&quot;); } return null; }} shouldFilter：返回一个Boolean值，判断该过滤器是否需要执行。返回true执行，返回false不执行。 run：过滤器的具体业务逻辑。 filterType：返回字符串，代表过滤器的类型。包含以下4种： pre：请求在被路由之前执行 route：在路由请求时调用 post：在route和errror过滤器之后调用 error：处理请求时发生错误调用 filterOrder：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。 4. 测试运行4个项目 启动成功后，在浏览器中输入：http://localhost:10001/api/consume/user/1 解释：(localhost:zuul端口/zuul设置的前缀/zuul中配置的服务名映射的路径/请求的路径/参数) 访问会失败，因为zuul的过滤器将此请求过滤了，请求参数种没有token参数，所以打印了zuul中ZuulFilter类里面run方法返回的字符串。 所以，加上token参数 查询成功了！！！！ 同时也不仅仅可以通过服务消费者进行访问，也可以直接访问服务提供者，如输入http://localhost:10001/api/provide/user/1?token=1 也访问成功了！ 我们以访问10086端口，查看eureka注册中心注册了哪些微服务 完成！！！！！ 5. 各项目的pom依赖5.1 eureka-server12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.hay.eureka&lt;/groupId&gt; &lt;artifactId&gt;eureka-server&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;eureka-server&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;!-- 依赖的版本号 --&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR6&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;!-- 引入的依赖 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 统一版本管理 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 5.2 service-consume1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR6&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- eureka用户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 熔断组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- feign组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 5.3 service-provide1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR6&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 5.4 zuul-server12345678910111213141516171819202122232425262728293031323334353637383940&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR6&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;","link":"/2021/09/30/SpringCloud%E4%BD%BF%E7%94%A8feign%E5%92%8Czuul%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"title":"Jenkins安装 Jenkins","text":"Linux 安装 Jenkins安装Jenkins必须要安装JDK 和Maven 1. 安装JDK 先创建一个文件夹来作为安装目录 1234&gt;# 创建文件夹&gt;mkdir /usr/local/java&gt;# 进入创建文件夹&gt;cd /usr/local/java 下载 JDK1.8 的安装包 下载地址Java SE Development Kit 8 — 下载 | Oracle 中国，可以手动下载然后用xftp上传到安装目录中，也可以用wget命令直接下载 1&gt;wget https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html#license-lightbox 解压 1&gt;tar -zxvf jdk-8u291-linux-x64.tar.gz 修改配置文件 在配置文件中填了jdk安装的路径，与在window里配置 java 的环境变量一样，让计算机能找到它 1&gt;vim /etc/profile ​ 修改完成后保存，退出，并且更新配置 12345&gt;# 保存退出&gt;# 按键盘上的esc -&gt; 键盘输入wq -&gt; 回车&gt;# 更新配置文件&gt;source /etc/profile 检查配置是否成功 1&gt;java -version 2. 安装Maven 同上创建一个文件夹作为安装目录 1234&gt;# 上面创建了可以不创建&gt;mkdir /usr/local/java&gt;# 进入创建文件夹&gt;cd /usr/local/java 下载 maven 安装包 可以自己下了安装包在上传到安装目录，也可以在线下载。这儿使用的是清华大学的开源镜像网站清华大学开源软件镜像站 | Tsinghua Open Source Mirror 1&gt;wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz 解压 1&gt;tar -zxvf apache-maven-3.6.3-bin.tar.gz 修改配置文件 1&gt;vim /etc/profile 保存并退出，再更新配置 1&gt;source /etc/profile 3. 安装Jenkins 创建一个文件夹作为安装目录 1&gt;# 创建文件夹mkdir /usr/local/jenkins# 进入创建文件夹cd /usr/local/jenkins 下载Jenkins 同样可以自己下了安装包在上传到安装目录，也可以在线下载。这儿也是使用的是清华大学的开源镜像网站 1&gt;wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/jenkins-2.287-1.1.noarch.rpm 解压 1&gt;# 解压rpm -ivh jenkins-2.287-1.1.noarch.rpm 查看安装位置 1&gt;# 查看解压到的目录whereis jenkins ​ 前面这个才是jenkins解压过后war包所在的位置，后面那个是第一步时自己创建的目录 ​ 进入war包目录 1&gt;cd /usr/lib/jenkinsll 修改配置文件 在启动jenkins之前，需要配置下jdk的目录，让jenkins能找到jdk 1&gt;vim /etc/init.d/jenkins 修改完成后保存退出。 但是jenkins默认启动的端口号时8080，也可以修改一下启动的端口号。我已经提前修改了一次了 1&gt;vim /etc/sysconfig/jenkins 启动jenkins 1&gt;service jenkins start ​ 当出现[确定]就代表启动成功 访问jenkins 在浏览器上输入你的ip地址和端口会，如：https:ip地址:8771即可访问。 初始化配置jenkins 进入jenkins主页后，需要进行登陆注册，密码在/var/lib/jenkins/secrets/initialAdminPassword文件里，打开文件后的一串字符就是密码，复制过来就行了 1&gt;cat /var/lib/jenkins/secrets/initialAdminPassword 点击继续后登几分钟会出现安装插件页面，选左边推荐的就行了。 等待安装完成后，创建管理员用户保存即可。 1docker run -d -p 443:443 -p 9:80 -p 222:22 --name gitlab --restart always -v /usr/local/gitlab/config:/etc/gitlab -v /usr/local/gitlab/logs:/var/log/gitlab -v /usr/local/gitlab/data:/var/opt/gitlab --privileged=true gitlab/gitlab-ce","link":"/2021/11/19/Jenkins/"}],"tags":[],"categories":[{"name":"软件安装","slug":"软件安装","link":"/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}]}